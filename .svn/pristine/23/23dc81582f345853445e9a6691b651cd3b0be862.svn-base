<?php
require_once BLOGIC."/BLogic.php";
require_once ROOT.'/Components/Controllers/PageWrapper.php';

class OccupantDetailsList extends PageWrapper
{
	protected $asset;
	protected $selectedOccupant;
	protected $currentIncomeSource;
	
	public function __construct($formData)
	{
		$templateName = $this->templateNameBasedOnDevice("OccupantDetailsList", array());
		parent::__construct($formData, $templateName);
	}
	
	public function asset()
	{
		if (! $this->asset)
		{
			$id = doDecrypt($this->formValueForKey("selectedID"));
			
			if ($id) {
				
				$this->asset = BLGenericRecord::recordMatchingKeyAndValue("Asset", "assetID", $id);
			}
		}
		return $this->asset;
	}	
	
	public function currentIncomeSource()
	{
		if (! $this->currentIncomeSource)
		{
			$id = doDecrypt($this->formValueForKey("currentIncomeSourceID"));
				
			if ($id) {
	
				$this->currentIncomeSource = BLGenericRecord::recordMatchingKeyAndValue("IncomeSource", "incomeSourceID", $id);
			}
		}
		return $this->currentIncomeSource;
	}
	
	public function selectedOccupant()
	{
		if (! $this->selectedOccupant)
		{
			$id = doDecrypt($this->formValueForKey("selectedOccupantID"));			
			if ($id) {
				$this->selectedOccupant = BLGenericRecord::recordMatchingKeyAndValue("Occupant", "occupantID", $id);
			}
		}
		return $this->selectedOccupant;
	}
	
	public function saveAction(){
		$this->processFormValueKeyPathsForSave();
		try {
			if($this->selectedOccupant()){
				$this->selectedOccupant()->save();
			}
		} catch (Exception $error) {
                debugln($error->getMessage());
                $this->errorMessage = "There was a problem saving the occupant, please try again.";
            }
	}
	
	public function backAction(){
		if($this->currentIncomeSource()){
			if($this->selectedOccupant()){
				$this->selectedOccupant()->save();
			}
			//echo "selectedID : " + $this->formValueForKey("selectedID");
			$page = $this->pageWithName("IncomeSourceEdit",  array("selectedID" =>  $this->formValueForKey("selectedID")));
			
			return $page;
		}else{
			$page = $this->pageWithName("AssetDetails", array("selectedID" => $this->formValueForKey("selectedID")));
			return $page;
		}
	}
	
	public function cancelAction(){
		if($this->currentIncomeSource()){
			$page = $this->pageWithName("IncomeSourceEdit",  array("selectedID" =>  $this->formValueForKey("selectedID")));
			return $page;
		}else{
			$page = $this->pageWithName("AssetDetails", array("selectedID" =>  $this->formValueForKey("selectedID")));
			return $page;
		}
	}
	
	public function selectForIncomeSourceAction(){
		$selectedOccupantID = doDecrypt($this->formValueForKey("selectedOccupantID"));
		
		$currentIncomeSource->vars["occupantID"] = $selectedOccupantID;
		$page = $this->pageWithName("AssetDetails", array("selectedID" => $this->formValueForKey("selectedID")));
		
		return $page;
	}
	
}
?>