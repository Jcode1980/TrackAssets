<?php 
	require_once BLOGIC."/BLogic.php"; 
	require_once ROOT.'/Components/Controllers/PageWrapper.php';
	 
	class AssetDetails extends PageWrapper 
	{ 
        public $currentView;
        public $currentChart;
        
        protected $asset;
        protected $selectedExpenseLineItem;
        
        
		public function __construct($formData) 
		{ 
			$templateName = $this->templateNameBasedOnDevice("AssetDetails", array());
			parent::__construct($formData, $templateName);
            
			$this->currentView = doDecrypt($this->formValueForKey("currentView"));
			if (! $this->currentView)
				$this->currentView = "Details";
			
			$this->currentChart = doDecrypt($this->formValueForKey("currentChart"));
			if (! $this->currentChart)
				$this->currentChart = "Net Income Chart";

		} 
        
        
        
        public function asset()
        {
            if (! $this->asset)
            {
                $id = doDecrypt($this->formValueForKey("selectedID"));
                //echo "ID : " . $id;
                if ($id) {
                    $this->asset = BLGenericRecord::recordMatchingKeyAndValue("Asset", "assetID", $id);
                }
                else {
                    $this->asset = BLGenericRecord::newRecordOfType("Asset");
                }
            }
            return $this->asset;
        }
        
        public function save()
        {
            $this->processFormValueKeyPathsForSave();
            try {
                $this->asset()->save();
                
                $page = $this->pageWithName("AssetList");
                $page->alertMessage = "Asset saved.";
                return $page;
            }
            catch (Exception $error) {
                debugln($error->getMessage());
                $this->errorMessage = "There was a problem saving the asset, please try again.";
            }
        }
                
        public function selectedExpenseLineItem(){
        	if (! $this->selectedExpenseLineItem)
        	{
        		$id = doDecrypt($this->formValueForKey("selectedExpenseLineItemID"));
        		echo "selectedExpenseLineItemID : " . $id;
        		if ($id) {
        			$this->selectedExpenseLineItem = BLGenericRecord::recordMatchingKeyAndValue("ExpenseLineItem", "expenseLineItemID", $id);
        		}
        	}
        	return $this->selectedExpenseLineItem;
        }

        public function createExpenseLineItem(){
        	$newExpenseLineItem = BLGenericRecord::newRecordOfType("ExpenseLineItem");
        	$newExpenseLineItem->defaultSetOnCreation();
        	$newExpenseLineItem->vars["assetID"] = $this->asset()->vars["assetID"];
        
        	
        	
        	$newExpenseLineItem->save();
        	
        	$this->setFormValueForKey(doEncrypt($newExpenseLineItem->vars["expenseLineItemID"]), "selectedExpenseLineItemID");
        	
        	echo "new expense lineItem: " . $newExpenseLineItem->vars["assetID"];
        	echo "new expense lineItem ID: " . $newExpenseLineItem->vars["expenseLineItemID"];        	
        	
        }
        
        public function hasSelectedExpenseLineItem(){
        	return !is_null($this->selectedExpenseLineItem());
        }
        
        public function incomeSources(){
            return $this->asset()->valueForRelationship("incomesources");
        }
        
        public function reportsChartArray(){
        	$reports = array("Expenses Summary Chart", "Net Income Chart");
        	return $reports;
        }
        
        public $fromMonth;
        public $toMonth;
        
        public function chartArrayTable(){
        	return $chartTable= "[
          ['Month', 'Rent', 'Expenses', 'Profit'],
          ['Jan', 1500, 400, 1100],
          ['Feb', 1600, 460, 1540],
          ['Mar', 1000, 1120, -120],
          ['Apr', 1500, 3000, -1500]
        ]";
        }
        
        /***************** Income Tab code ***************/
        protected $selectedIncomeSource;
        protected $selectedIncomeLineItem;
        
        public function selectedIncomeSource(){
        	
        	
        	if (!$this->selectedIncomeSource)
        	{
        		$selectedIncomeSourceID = doDecrypt($this->formValueForKey("selectedIncomeSourceID"));
        		debugln("selectedIncomeSource baby: " . $selectedIncomeSourceID);
        		if(is_null($selectedIncomeSourceID) && !is_null($this->asset()->firstIncomeSource())){
        			$selectedIncomeSourceID = $this->asset()->firstIncomeSource()->vars["incomeSourceID"];
        		}
        		
        		//echo "ID : " . $id;
        		if ($selectedIncomeSourceID) {
        			$this->selectedIncomeSource = BLGenericRecord::recordMatchingKeyAndValue("IncomeSource", "incomeSourceID", $selectedIncomeSourceID);
        		}
        	}
        	return $this->selectedIncomeSource;
        } 
        
        public function selectedIncomeLineItem(){
        	if (!$this->selectedIncomeLineItem)
        	{
        		$selectedIncomeLineItemID = doDecrypt($this->formValueForKey("selectedIncomeLineItemID"));
        	
        	
        		//echo "ID : " . $id;
        		if ($selectedIncomeLineItemID) {
        			$this->selectedIncomeLineItem = BLGenericRecord::recordMatchingKeyAndValue("IncomeLineItem", "incomeLineItemID", $selectedIncomeLineItemID);
        		}
        	}
        	return $this->selectedIncomeLineItem;
        }
        
        public function safeNameAndOccupant(){
        	if($this->selectedIncomeSource()){
        		return $this->selectedIncomeSource()->safeNameAndOccupant();
        	} 
        	else{
        		return "";
        	}
        }
        
//         public function selectIncomeLineItemAction(){
//         	return null;
//         }

        public function selectIncomeSource(){
        	$selectedIncomeSourceID = $this->formValueForKey("selectedIncomeSourceSelect");
        	
        	
        	$this->setFormValueForKey(doEncrypt($selectedIncomeSourceID), "selectedIncomeSourceID");
        	debugln("selectedIncomeSourceID: " . doDecrypt($this->formValueForKey("selectedIncomeSourceID")));
        }
        
     
        public function createIncomeLineItem(){
        	$newIncomeLineItem = BLGenericRecord::newRecordOfType("IncomeLineItem");
        	$newIncomeLineItem->defaultSetOnCreation();
        	$newIncomeLineItem->vars["incomeSourceID"] = $this->selectedIncomeSource()->vars["incomeSourceID"];

        	$this->processFormValueKeyPathsForSave();
        	$newIncomeLineItem->save();
        	
        	debugln("this is the new incomeLIneItem: " . $newIncomeLineItem);
        	
        	$this->setFormValueForKey(doEncrypt($newIncomeLineItem->vars["incomeLineItemID"]), "selectedIncomeLineItemID");
        	 
        	debugln("new income lineItem: " . $newIncomeLineItem->vars["incomeSourceID"]);
        	debugln("new income lineItem ID: " . $newIncomeLineItem->vars["incomeLineItemID"]);
        	 
        }
        
	} 

	
	
	
