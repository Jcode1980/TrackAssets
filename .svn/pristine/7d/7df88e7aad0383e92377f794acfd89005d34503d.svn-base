<?php 
	require_once BLOGIC."/BLogic.php"; 
	require_once ROOT.'/Components/Controllers/PageWrapper.php';
	 
	class IncomeSourceEdit extends PageWrapper 
	{ 
        public $currentView;
        protected $asset;
        protected $selectedIncomeSource;
        
		public function __construct($formData) 
		{ 
			$templateName = $this->templateNameBasedOnDevice("IncomeSourceEdit", array());
			parent::__construct($formData, $templateName);
           
		} 
        
        
        
        public function asset()
        {
            if (! $this->asset)
            {
                $id = doDecrypt($this->formValueForKey("selectedID"));
                if ($id) {
                    $this->asset = BLGenericRecord::recordMatchingKeyAndValue("Asset", "assetID", $id);
                }
                else {
                    $this->asset = BLGenericRecord::newRecordOfType("Asset");
                }
            }
            return $this->asset;
        }
        
        public function saveAction()
        {
            $this->processFormValueKeyPathsForSave();
            try {
                $this->asset()->save();
                return $this;
            }
            catch (Exception $error) {
                debugln($error->getMessage());
                $this->errorMessage = "There was a problem saving the asset, please try again.";
            }
        }
	
        public function incomeSources(){
        	echo "asset: " . is_null($this->asset());
        	return $this->asset()->valueForRelationship("incomesources");
        }
        
        public function backAction(){
        	$this->processFormValueKeyPathsForSave();
        	try {
        		$this->selectedIncomeSource()->save();
        		return $page;
        	}
        	catch (Exception $error) {
        		debugln($error->getMessage());
        		$this->errorMessage = "There was a problem saving data, please try again.";
        	}
        }
        
        public function cancelAction(){
        	$returnPage = $this->pageWithName("AssetDetails");
        	//$returnPage.setSelectedID($this->formValueForKey("selectedID"));
        	echo("selected ID  : " + doEncrypt($this->formValueForKey("selectedID")));
        	$returnPage->setFormValueForKey(doEncrypt($this->formValueForKey("selectedID")), "selectedExpenseLineItemID");
        	return $returnPage;
        }
	
	
		public function selectedIncomeSource(){
			if (! $this->selectedIncomeSource)
			{
				$id = doDecrypt($this->formValueForKey("selectedIncomeSourceID"));
				
				if ($id) {
					$this->selectedIncomeSource = BLGenericRecord::recordMatchingKeyAndValue("IncomeSource", "incomeSourceID", $id);
				}
	
			}
			return $this->selectedIncomeSource;
		}
		
		
		
		public function editIncomeSource(){
			$page = $this->pageWithName("IncomeSourceEdit");
			
			//$id = doDecrypt($this->formValueForKey("selectedID"));
			$id = $this->formValueForKey("selectedID");
			
			if ($id) {
				$this->asset = BLGenericRecord::recordMatchingKeyAndValue("Asset", "assetID", $id);
			}
			
	        return $page;
		}
	}
?>
